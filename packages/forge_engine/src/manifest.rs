use std::collections::{BTreeMap, HashMap};

/// Supported manifest formats generated by the engine.
#[derive(Debug, Clone, Copy)]
pub enum ManifestKind {
    PubspecYaml,
    PackageJson,
}

/// Manifest output containing a canonical filename and file contents.
pub struct Manifest {
    pub file_name: &'static str,
    pub contents: String,
}

/// Generates a manifest document for the given renderer dependencies.
pub fn generate_manifest(kind: ManifestKind, deps: &HashMap<String, String>) -> Option<Manifest> {
    match kind {
        ManifestKind::PubspecYaml => Some(Manifest {
            file_name: "pubspec.yaml",
            contents: render_pubspec(deps),
        }),
        ManifestKind::PackageJson => Some(Manifest {
            file_name: "package.json",
            contents: render_package_json(deps),
        }),
    }
}

fn render_pubspec(deps: &HashMap<String, String>) -> String {
    let mut buffer = String::new();
    buffer.push_str("name: forge_rendered_app\n");
    buffer.push_str("description: Generated by Forge renderer\n");
    buffer.push_str("publish_to: 'none'\n");
    buffer.push_str("environment:\n");
    buffer.push_str("  sdk: '>=3.0.0 <4.0.0'\n");
    buffer.push_str("dependencies:\n");

    let ordered: BTreeMap<_, _> = deps.iter().collect();
    for (key, value) in ordered {
        let value = value.trim();
        if value.starts_with("sdk:") {
            buffer.push_str(&format!("  {}:\n", key));
            buffer.push_str(&format!("    {}\n", value));
        } else {
            buffer.push_str(&format!("  {}: {}\n", key, value));
        }
    }

    buffer
}

fn render_package_json(deps: &HashMap<String, String>) -> String {
    use serde_json::{json, Map, Value};

    let mut deps_map = Map::new();
    let mut ordered: Vec<(&String, &String)> = deps.iter().collect();
    ordered.sort_by(|a, b| a.0.cmp(b.0));
    for (name, version) in ordered {
        deps_map.insert(name.clone(), Value::String(version.clone()));
    }

    let manifest = json!({
        "name": "forge-rendered-app",
        "version": "0.1.0",
        "private": true,
        "dependencies": Value::Object(deps_map),
    });

    serde_json::to_string_pretty(&manifest).unwrap_or_else(|_| String::new())
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn pubspec_renders_dependencies() {
        let deps = HashMap::from([
            ("flutter".to_string(), "sdk: flutter".to_string()),
            ("http".to_string(), "^1.2.0".to_string()),
        ]);
        let manifest = render_pubspec(&deps);
        assert!(manifest.contains("flutter:\n    sdk: flutter"));
        assert!(manifest.contains("http: ^1.2.0"));
    }

    #[test]
    fn package_json_renders_dependencies() {
        let deps = HashMap::from([
            ("react".to_string(), "^18.0.0".to_string()),
            ("react-dom".to_string(), "^18.0.0".to_string()),
        ]);
        let manifest = render_package_json(&deps);
        assert!(manifest.contains("\"react\": \"^18.0.0\""));
        assert!(manifest.contains("\"react-dom\": \"^18.0.0\""));
    }
}
