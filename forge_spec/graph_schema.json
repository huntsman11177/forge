{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://forge.dev/spec/graph_schema.json",
  "title": "ForgeGraph",
  "type": "object",
  "required": ["forge_schema_version", "project", "screens"],
  "additionalProperties": false,
  "properties": {
    "forge_schema_version": {
      "type": "string",
      "pattern": "^\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9_.-]+)?$",
      "description": "Semantic version of the ForgeGraph schema used by this document."
    },
    "metadata": {
      "$ref": "#/definitions/GraphMetadata"
    },
    "project": {
      "$ref": "#/definitions/GraphProject"
    },
    "screens": {
      "type": "array",
      "minItems": 1,
      "items": { "$ref": "#/definitions/Screen" }
    },
    "logic": {
      "type": "array",
      "items": { "$ref": "#/definitions/LogicNode" }
    }
  },
  "definitions": {
    "LogicNode": {
      "type": "object",
      "required": ["id", "type", "screen", "widgetPath", "event", "expression"],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_-]{6,}$"
        },
        "type": {
          "type": "string",
          "enum": ["callback"]
        },
        "screen": {
          "type": "string",
          "description": "Identifier of the screen this logic node belongs to."
        },
        "widgetPath": {
          "type": "string",
          "description": "Slash-delimited path to the widget within the screen tree."
        },
        "widget": {
          "type": "string",
          "description": "Widget type where this logic node originates."
        },
        "event": {
          "type": "string",
          "description": "Widget property/event name triggering the logic."
        },
        "expression": {
          "type": "string",
          "description": "Original Dart expression body for the callback."
        },
        "intents": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["navigation", "async", "provider"]
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": true
        }
      }
    },
    "GraphProject": {
      "type": "object",
      "required": ["id", "name"],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "minLength": 1
        },
        "name": {
          "type": "string",
          "minLength": 1
        },
        "description": {
          "type": "string"
        }
      }
    },
    "GraphMetadata": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string",
          "description": "Workspace user or automation that generated the graph."
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of this graph payload."
        }
      }
    },
    "Screen": {
      "type": "object",
      "required": ["id", "name", "root"],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_-]{3,64}$",
          "description": "Stable identifier for this screen."
        },
        "name": {
          "type": "string",
          "minLength": 1,
          "description": "Human readable screen name."
        },
        "entry": {
          "type": "boolean",
          "default": false,
          "description": "Whether this screen is the primary entry route."
        },
        "navigation": {
          "$ref": "#/definitions/NavigationSpec"
        },
        "providers": {
          "type": "array",
          "items": { "$ref": "#/definitions/Provider" }
        },
        "root": {
          "$ref": "#/definitions/WidgetNode"
        }
      }
    },
    "WidgetNode": {
      "type": "object",
      "required": ["widget"],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_-]{8,}$",
          "description": "Stable node identifier used for diffing and references."
        },
        "widget": {
          "type": "string",
          "description": "Fully qualified Flutter widget constructor name.",
          "minLength": 1
        },
        "props": {
          "type": "object",
          "additionalProperties": { "$ref": "#/definitions/PropValue" },
          "description": "Widget properties mapped to literal or binding values."
        },
        "bindings": {
          "type": "array",
          "items": { "$ref": "#/definitions/Binding" }
        },
        "children": {
          "type": "array",
          "items": { "$ref": "#/definitions/WidgetNode" }
        }
      }
    },
    "PropValue": {
      "type": "object",
      "required": ["type"],
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string",
          "enum": ["literal", "expression", "binding", "enum"],
          "description": "Describes how the value should be interpreted."
        },
        "value": {
          "type": ["string", "number", "boolean", "null"],
          "description": "Inlined literal value when type=literal."
        },
        "expression": {
          "type": "string",
          "description": "Dart expression serialized as text when type=expression."
        },
        "binding": {
          "$ref": "#/definitions/BindingReference",
          "description": "Binding descriptor when type=binding."
        }
      },
      "allOf": [
        {
          "if": { "properties": { "type": { "const": "literal" } } },
          "then": { "required": ["value"] }
        },
        {
          "if": { "properties": { "type": { "const": "expression" } } },
          "then": { "required": ["expression"] }
        },
        {
          "if": { "properties": { "type": { "const": "binding" } } },
          "then": { "required": ["binding"] }
        },
        {
          "if": { "properties": { "type": { "const": "enum" } } },
          "then": { "required": ["value"] }
        }
      ]
    },
    "Binding": {
      "type": "object",
      "required": ["slot", "target"],
      "additionalProperties": false,
      "properties": {
        "slot": {
          "type": "string",
          "description": "Widget property or event being bound."
        },
        "target": {
          "$ref": "#/definitions/BindingReference"
        },
        "transform": {
          "type": "string",
          "description": "Optional reference to a transform node applied to the binding."
        }
      }
    },
    "BindingReference": {
      "type": "object",
      "required": ["type", "ref"],
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string",
          "enum": ["provider", "widget", "logic", "external"],
          "description": "Category of binding destination."
        },
        "ref": {
          "type": "string",
          "description": "Identifier referencing provider/widget/logic nodes."
        },
        "provider_id": {
          "type": "string",
          "description": "Stable identifier of the backing provider when type=provider."
        },
        "path": {
          "type": "string",
          "description": "Optional path accessor into structured data."
        },
        "type_hint": {
          "type": "string",
          "description": "Optional Dart type hint for the resolved binding value."
        }
      }
    },
    "Provider": {
      "type": "object",
      "required": ["id", "name", "kind", "type"],
      "additionalProperties": false,
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_-]{6,}$"
        },
        "name": {
          "type": "string",
          "minLength": 1
        },
        "kind": {
          "type": "string",
          "enum": [
            "state",
            "future",
            "stream",
            "notifier",
            "family"
          ]
        },
        "type": {
          "type": "string",
          "description": "Dart type represented by the provider."
        },
        "initialValue": {
          "type": ["string", "number", "boolean", "null"],
          "description": "Optional literal initial value for simple providers."
        },
        "dependencies": {
          "type": "array",
          "items": { "type": "string" }
        }
      }
    },
    "NavigationSpec": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "path": {
          "type": "string",
          "description": "Route path or deep-link expression."
        },
        "guard": {
          "type": "string",
          "description": "Optional guard logic reference."
        },
        "transitions": {
          "type": "array",
          "items": {
            "type": "object",
            "required": ["type"],
            "properties": {
              "type": {
                "type": "string",
                "enum": ["fade", "slide", "scale", "custom"]
              },
              "durationMs": {
                "type": "integer",
                "minimum": 0
              },
              "curve": {
                "type": "string"
              }
            }
          }
        }
      }
    }
  }
}
